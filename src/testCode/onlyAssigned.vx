x := 1; // #warn #unused

func() { // #warn #no-effect
  y := 1; // #warn #unused #mutation
  y += 1;
  z := 1; // #warn #unused
  z++;
  zz := 1; // #warn #unused
  a := (zz += 1); // #error #subexpression-mutation
  return a;
};

func() { // #warn #no-effect
  i := 0;
  i = i + 1; // TODO: doesn't count as using i

  return 3;
};

func() { // #warn #no-effect
  i := 0;
  j := 0;

  // TODO: This circumvents unused checking but it shouldn't
  i = j;
  j = i;

  return 3;
};

return 1;
