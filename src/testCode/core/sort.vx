func sort(arr, before) {
  if (arr:length() == 0) {
    return arr;
  }

  func sortRange(a, start, end) {
    n := end - start;

    if (n == 1) {
      return [a, start, end];
    }

    mid := start + (n - (n % 2)) / 2;

    return merge(
      sortRange(a, start, mid),
      sortRange(a, mid, end),
    );
  };

  func merge(left, right) {
    [leftArr, leftPos, leftEnd] := left;
    [rightArr, rightPos, rightEnd] := right;

    result := [];
    resultLen := (leftEnd - leftPos) + (rightEnd - rightPos);

    for {
      [leftItem, rightItem] := [leftArr[leftPos], rightArr[rightPos]];

      leftBefore := before(leftItem, rightItem);

      if (leftBefore == true) {
        result += [leftItem];
        leftPos++;

        if (leftPos == leftEnd) {
          for (rightPos < rightEnd) {
            result += [rightArr[rightPos]];
            rightPos++;
          }

          return [result, 0, resultLen];
        }
      }

      if (leftBefore == false) {
        result += [rightItem];
        rightPos++;

        if (rightPos == rightEnd) {
          for (leftPos < leftEnd) {
            result += [leftArr[leftPos]];
            leftPos++;
          }

          return [result, 0, resultLen];
        }
      }
    }
  };

  return sortRange(arr, 0, arr:length())[0];
};

nums := [3, 1, 1, 2, 4, -7];

assert [-7, 1, 1, 2, 3, 4] == sort(
  nums,
  func(a, b) => a < b,
);

assert [4, 3, 2, 1, 1, -7] == sort(
  nums,
  func(a, b) => a > b,
);

return sort;
