// Doesn't cause an infinite loop - not executed until used (type analysis
// should occur though)
// import circular; // TODO

return {
  foo: func(n) {
    if (n % 2 == 0) {
      // This works because imports are lazy, so the circular variable doesn't
      // get its value until we use it here
      return circular.bar(); // #error #not-found TODO
    }

    return 'odd';
  },

  bar: func(n) {
    if (n % 2 == 1) {
      // This works because imports are lazy, and the circular variable doesn't
      // get its value until we use it here
      return circular.foo(); // #error #not-found TODO
    }

    return 'even';
  },
};
