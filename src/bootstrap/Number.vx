func NonEmptyLine(lines, [i, j]) {
  if (i >= lines:Length()) {
    return null;
  }

  line := lines[i];

  if (j >= line:Length()) {
    return null;
  }

  return line;
};

func Digit(s) => switch {
  (s == '0') => 0u64;
  (s == '1') => 1u64;
  (s == '2') => 2u64;
  (s == '3') => 3u64;
  (s == '4') => 4u64;
  (s == '5') => 5u64;
  (s == '6') => 6u64;
  (s == '7') => 7u64;
  (s == '8') => 8u64;
  (s == '9') => 9u64;

  true => null;
};

func isNull(x) => x:String() == 'null';

func Number(lines, [i, j]) {
  line := NonEmptyLine(lines, [i, j]);

  if (isNull(line)) {
    return null;
  }

  res := null;

  for {
    digit := Digit(line[j]);

    if (isNull(digit)) {
      break;
    }

    if (isNull(res)) {
      res = digit;
    } else {
      res *= 10u64;
      res += digit;
    }

    j++;

    if (j >= line:Length()) {
      break;
    }
  }

  if (isNull(res)) {
    return null;
  }

  return [['literal', res], [i, j]];
};

return Number;
