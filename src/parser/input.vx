import math from 'core'; // #error

import factorial;

// main doesn't have special significance
func main(n: i32) { // #warning
  2 ** 3 ** 4; // #warning
  1 + 1; // #warning

  100 + 2 * 3; // #warning

  foo := 7;
  (import bar)(); // #warning

  if (1 > 1) {
    foo = foo + 1;
  }

  return multiplyAdd(n, n, n) + 'hello'; // #error TODO special function scoping
};

func multiplyAdd(a: i32, b: i32, c: i32) => a * b + c; // #warning TODO

func methodCalls() { // #warning
  return getObject():method():method2(); // #error
};

func arrays() { // #warning
  literal := [1, 2, 3, 2 + 2];
  subscript := literal[blah()]; // #error #warning #error
};

func objects() { // #warning
  x := { a: 1, b: 1 };
  x.b++;
  x.c := 3; // #error
};

func immutableStuff() { // #warning
  x := { a: 0, b: 0 };
  y := x;

  x.a++;

  y == { a: 0, b: 0 }; // #warning
  x == { a: 1, b: 0 }; // #error #warning
};

func trailing() { // #warning
  { // #warning
    a: 1,
    b: 2,
  };

  [ // #error #warning
    1,
    2,
    3,
  ];
};

/*
  block comments work too
*/

continue;
break;

func() {}; // #error

foo := func() {}; // #error #warning

func loops() { // #warning
  for {
    infiniteLoop := 1; // #warning
  }

  for (1) {}
  for (i := 1; 1; i = i + 1) {}
  for (i of values) {} // #error #error #error
};

class Point { // #warning
  x: f64;
  y: f64;

  :sqDist() => x ** 2 + y ** 2;

  :sum() {
    return x + y;
  }
};

class Error: string {
  :message() { return this; }
};

assert 1 == 1;

return func factorial(n: i32) => switch {
  (n < 0) => Error('Invalid input');
  (n == 0) => 1;
  (true) => n * factorial(n - 1);
};
