import blackjack;

newline := '
';

func renderCard(card) {
  return card.name ++ card.suit;
};

func renderHand(hand) {
  return (hand
    :map(func(card) => renderCard(card) ++ '  ')
    :reduce(++)
  );
};

func renderOptions(options) {
  res := 'Options:';

  for (op of options) {
    res ++= newline ++ '  ' ++ op;
  }

  return res;
};

func renderScore(hand) {
  score := blackjack.scoreHand(hand);

  return switch {
    (score <= 21) => score:String();
    true => 'BUST';
  };
};

func padLeft(len, str) {
  for (str:Length() < len) {
    str = ' ' ++ str;
  }

  return str;
};

func render({rand, deck, account, bet, playerHand, dealerHand, options}) {
  parts := [
    newline ++ '====================================',
    (
      'Account: $' ++ padLeft(3, account:String()) ++ newline ++
      'Bet:     $' ++ padLeft(3, bet:String())
    )
  ];

  // TODO: This is a hack to suppress the warning for not using rand.
  True := [rand, deck]:Length() == 2;

  optionsStr := options:String();

  finished := optionsStr == '[]' || optionsStr == '[\'next\']';

  if (finished) {
    parts ++= ['Dealer hand: ' ++ renderHand(dealerHand)];
  } else {
    parts ++= ['Dealer hand: ' ++ renderCard(dealerHand[0]) ++ '  ??'];
  }

  parts ++= ['Your hand:   ' ++ renderHand(playerHand)];

  if (finished) {
    parts ++= [
      'Your score:   ' ++ renderScore(playerHand) ++ newline ++
      'Dealer score: ' ++ renderScore(dealerHand)
    ];

    betStr := '  $' ++ bet:String();

    parts ++= switch (blackjack.WinLossTie(playerHand, dealerHand)) {
      'win' => ['===> WIN <===' ++ newline ++ betStr ++ ' added'];
      'loss' => ['===> LOSS <===' ++ newline ++ betStr ++ ' deducted'];
      'tie' => ['===> TIE <==='];
    };
  }

  parts ++= switch {
    (options:Length() == 0) =>
      ['Game Over']
    ;

    True =>
      [renderOptions(options), 'What will you do? ']
    ;
  };

  msg := parts:reduce(func(acc, next) => acc ++ newline ++ newline ++ next);

  return msg;
};

return render;
