- Bytecode is typeless/dynamic for now. Might add {mode=typed} later or have a separate bytecode for typed / efficient purposes, or it might be more appropriate to go straight to webassembly instead.

stack machine

two stacks:
- evaluation stack
- locals stack

natively understands the vortex universe of values

type followed by data to fill that type

eg this pushes 163 onto the stack
  {i32} 00 00 00 a3
  |     |
  ^ {type} is a stand-in for a u8big with arbitrary value to represent that type, the exact mapping can be determined later
        |
        ^ 4 bytes representing the i32, in big endian order {due to apparent hardware preference for big endian, but this might change

eg these 7 bytes push [null, true, 60u8] onto the stack:
  {array} {null} {bool} 01 {u8} 3c {end}


Tentative values for codes:

code     | byte
---------------
{end}    | 00 // not a vortex value, but used in the bytecode representation of vortex values


                                    literals
                                   ==========

type     | followed by
----------------------
{null}   | 0 bytes
         |
{bool}   | 1 byte // only 00 and 01 are legal
         |
{u8}     | 1 byte
{u16}    | 2 bytes
{u32}    | 4 bytes
{u64}    | 8 bytes
{i8}     | 1 byte // aka char
{i16}    | 2 bytes // aka short
{i32}    | 4 bytes // aka int
{i64}    | 8 bytes // aka long
         |
{f8}     | 1 byte // to be implemented later, but reserve a code for it
{f16}    | 2 bytes // to be implemented later, but reserve a code for it
{f32}    | 4 bytes
{f64}    | 8 bytes
         |
{u8big}  | bytes with 1 in the high bit
         | byte with 0 in the high bit
         |
{u64big} | 8-byte blocks with 1 in the high bit
         | 8-byte block with 0 in the high bit
         |
{i8big}  | bytes with 1 in the high bit
         | byte with 0 in the high bit
         |
{i64big} | 8-byte blocks with 1 in the high bit
         | 8-byte block with 0 in the high bit
         |
{f?big}  | ?
         |
{string} | variable - followed by utf8 byte sequence terminated by {end}
{array}  | variable - followed by a sequence of values followed by {end}
{object} | variable - followed by an even number of values followed by {end}
{set}    | variable - followed by an ordered sequence of values followed by {end}
         |
{func}   | {ubig}s indicating captures
         | {ubig} number of arguments
         | {end}
         | (balanced bytecode)
         | {end}


                                stack operators
                               =================

operator | description           | arguments
-----------------------------------------
{<<}     | left bit shift        | 2
{>>}     | right bit shift       | 2
{~}      | bitwise negate        | 1
         |                       |
{&}      | intersection          | 2
{^}      | exclusive union       | 2
{|}      | union                 | 2
         |                       |
{<}      | less                  | 2
{>}      | greater               | 2
{<=}     | less or equal         | 2
{>=}     | greater or equal      | 2
         |                       |
{==}     | equal                 | 2
{!=}     | not equal             | 2
{&&}     | and                   | 2
{||}     | or                    | 2
{!}      | not                   | 1
         |                       |
{*}      | multiply              | 2
{/}      | divide                | 2
{%}      | modulus               | 2
{**}     | power                 | 2
{-}      | minus                 | 2
{+}      | plus                  | 2
{neg}    | negate                | 1
         |                       |
{inc}    | increment             | 1
{dec}    | decrement             | 1
         |                       |
{++}     | concatenate           | 2
         |                       |
         | TODO: compounds       |
         |                       |
{index}  | index/at              | 2


                                locals operators
                               ==================

code      | description           | followed by
---------------------------------------------
{get}     | get local             | u8big (outputs to top of stack)
{=}       | set local             | u8big (consumes top of stack)
{get-arg} | get argument          | u8big (outputs to top of stack)
{get-cap} | get capture           | u8big (outputs to top of stack)


                                  control flow
                                 ==============

code        | description
---------------------------------------------------
{call}      | enter function
{return}    | return to parent context with value
{emit}      | TODO
{if}        | continue as normal if true, otherwise skip until matching {end}
{loop}      | remember this location, jump back here on {continue} or if matching {end} occurs
{break}     | skip until matching {end} of {loop}
{continue}  | jump back to {loop}


                                    examples
                                   ==========

input:

    sum := 0;

    for (i := 1; i < 1000; i++) {
      if (i % 3 == 0 || i % 5 == 0) {
        sum += i;
      }
    }

    return sum;

output:

    {i32} 00 00 00 00
    {=} 00

    {i32} 00 00 00 01
    {=} 01

    {loop}
      {get} 01
      {i32} 00 00 03 e8
      {<}
      {if}
        {get} 01
        {i32} 00 00 00 03
        {%}
        {i32} 00 00 00 00
        {==}
        {get} 01
        {i32} 00 00 00 05
        {%}
        {i32} 00 00 00 00
        {==}
        {||}
        {if}
          {get} 01
          {+=} 00
        {end}
      {end}

      {inc=} 01
    {end}

    {get} 00
    {return}

                                       ><
