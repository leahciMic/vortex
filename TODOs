TODO: Add tests for every possible note
TODO: Implement imports
TODO: Cross-type comparison operators e.g. :<:
TODO: Spaceship operator <=>
TODO: Element-wise arithmetic
TODO: log.info, log.warn etc
TODO: analyzer.info, analyzer.error etc
TODO: debugger.breakpoint;
TODO: Count operations in analyzer
TODO: implement: if (foo := maybeFoo(); foo != null) { return foo; }
TODO: Do something about confusing info labels for compile time in vim (can't ale render infos differently than warnings?)
TODO: 0b 0x 0o literals (allow floats and e, e.g. 0b1.1e5 == 48 (what to do about e in hex?))
TODO: Scope validation for class syntax
TODO: Implement TODO prioritization and sorting
TODO: Mechanism for removing TODO false positives
TODO: Variable/code references in comments (jsdoc?)
TODO: parser guessing
TODO: interactive debugger
TODO: range/set operators .. ., ,. ,, (commas indicate exclusion of that end)
TODO: super terse $ style lambdas: e.g. $ > 0 is func(x) => x > 0 (research similar constructs in existing languages)
TODO: define exactly what should/shouldn't be a valid identifier... js allows emojis, should vortex allow emojis?
TODO: rest/spread

TODO: syntactic sugar for function chains?
  func chain doThings() {
    json := chain fetch('http://blah');
    bytes := chain os.readFile('/tmp/{json.filename}');
    return bytes.length;
  }

  is equivalent to:

  func doThings() {
    func step1() => [fetch('http://blah'), step2];
    func step2(json) => [os.readFile('/tmp/{json.filename}'), step3];
    func step3(bytes) => bytes.length;

    return step1();
  }
