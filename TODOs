TODO: Implement ! and ~ operators
TODO: Fix asserts passing due to unknowns during test (generally want asserts to be graceful with unknowns in the actual language) (test requires all imports to resolve?)
TODO: When an exception is generated, add a subnote for each level of the stack (check errors are surfaced when importing invalid files)
TODO: Add tests for every possible note
TODO: String interpolation
TODO: Raw strings
TODO: Naming consistency module vs file
TODO: Argument destructuring
TODO: Class syntax
TODO: Cross-type comparison operators e.g. :<:
TODO: Allow object keys to be any functionless value
TODO: Add Set as another native data structure, e.g. {(1, {()}, 2)} == {(2, {()}, 1)}
TODO: Finish defining packaging system
TODO: Consider extending addition, subtraction, and matrix multiplication to inconsistent dimensions by (basically) assuming zeros (possibly use :+:, :*: etc)
TODO: Validator should call into Analyzer without waiting for complete context
TODO: Establish location indexing/linking so that caching the result of programs with equivalent syntax trees is possible
TODO: Spaceship operator <=>
TODO: Element-wise operators
TODO: assert.static?, also are type annotations equivalent to embedded assert.static?
TODO: enable {x: i32 = 3;} for creation, which generalizes nicely to allow some names to be created by destructuring and not others: {[x: i32, y] = [1, 2]}
TODO: Count operations in analyzer
TODO: implement: if (foo := maybeFoo(); foo != null) { return foo; }
TODO: 0b 0x 0o literals (allow floats and e, e.g. 0b1.1e5 == 48 (what to do about e in hex?))
TODO: Implement TODO prioritization and sorting
TODO: Mechanism for removing TODO false positives
TODO: Variable/code references in comments (jsdoc?)
TODO: parser guessing
TODO: interactive debugger
TODO: range/set operators .. ., ,. ,, (commas indicate exclusion of that end)
TODO: super terse $ style lambdas: e.g. $ > 0 is func(x) => x > 0 (research similar constructs in existing languages)
TODO: define exactly what should/shouldn't be a valid identifier... js allows emojis, should vortex allow emojis?
TODO: rest/spread

TODO: syntactic sugar for function chains?
  func chain doThings() {
    json := chain fetch('http://blah');
    bytes := chain os.readFile('/tmp/{json.filename}');
    return bytes.length;
  }

  is equivalent to:

  func doThings() {
    func step1() => [fetch('http://blah'), step2];
    func step2(json) => [os.readFile('/tmp/{json.filename}'), step3];
    func step3(bytes) => bytes.length;

    return step1();
  }
