import math from 'core';

import factorial;

// main doesn't have special significance
func main(n: i32) {
  2 ** 3 ** 4;
  1 + 1;

  100 + 2 * 3;

  foo := 7;
  (import bar)();

  if (1 > 1) {
    foo = foo + 1;
  }

  return multiplyAdd(n, n, n) + 'hello';
};

func multiplyAdd(a: i32, b: i32, c: i32) => a * b + c;

func methodCalls() {
  return getObject():method():method2();
};

func arrays() {
  literal := [1, 2, 3, 2 + 2];
  subscript := literal[blah()];
};

func objects() {
  x := { a: 1, b: 1 };
  x.b++;
  x.c := 3;
};

func trailing() {
  {
    a: 1,
    b: 2,
  };

  [
    1,
    2,
    3,
  ];
};

/*
  block comments work too
*/

continue;
break;

func() {};

foo := func() {};

func loops() {
  for {
    infiniteLoop := 1;
  }

  for (1) {}
  for (i := 1; 1; i = i + 1) {}
  for (i of values) {}
};
